# Sidebar panel for inputs ----
column(4, offset = 2,
br(), br(),
sliderInput(inputId = "children", label = "Number of Children", min = 0, max = 5, value = 2, width = "100%"),
sliderInput(inputId = "age", label = "Years of Age", min = 18, max = 50, value = 30, width = "100%"),
radioGroupButtons(
inputId = "smoker",
choiceNames = c("Non-Smoker", "Smoker"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
),
radioGroupButtons(
inputId = "male",
choiceNames = c("Male", "Female"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
)
),
column(4, offset = -1,
plotOutput(outputId = "plot", width = "100%")
)
)
server <- function(input, output) {
output$plot <- renderPlot({
rq_input <- data.frame(age = input$age,
children = input$children,
smoker = as.numeric(input$smoker),
male = as.numeric(input$male))
df <- rq_predict(rq_fit,rq_input)
gg_quantile_box(df)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(tidyverse)
library(RCurl)
library(RColorBrewer)
library(scales)
library(quantreg)
library(shinyWidgets)
library(ggrepel)
git_csv <- function(csv){
read.csv(text=getURL(paste("https://raw.githubusercontent.com/granthamtaylor/datasets/master/",csv,".csv", sep = "")))
}
insurance <- git_csv('insurance')
tau = c(0.15, 0.30, 0.50, 0.70, 0.85)
rq_fit <-rq(log(charges) ~ age + male + children + smoker + age:male + age:children + age:smoker + male:smoker + children:smoker, tau = tau, data = insurance)
rq_predict <- function(rq, record){
charges <- sort(as.vector(exp(predict(rq, record))))
df <- data.frame(charges, tau = tau, seq = 1:length(charges))
df$label <-  format_per(df, df$seq)
return(df)
}
format_per <- function(df, value){
return(paste0(df[value,'tau']*100,"th Percentile: $",format(round(df[value,'charges']),big.mark=",",scientific=FALSE)))
}
gg_quantile_box <- function(df){
ggplot(df, aes(x = 0, y = charges, label = label)) +
geom_errorbar(aes(ymin = df[1,'charges'],ymax = df[5,'charges'])) + theme_minimal() +
geom_crossbar(fatten = 2, fill = "#337AB7",aes(ymin = df[2,'charges'], y = df[3,'charges'],ymax = df[4,'charges'])) +
geom_text_repel(x = 0.6, hjust = 0, direction = "y") +
labs(x = NULL, y = "Distribution of Cost to Carrier") +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid = element_blank()) +
scale_x_continuous(limits = c(-.50, 1.3)) +
scale_y_continuous(limits = c((df[1,'charges'] * .99), (df[5,'charges'] * 1.01)))
}
ui <- fluidPage(
theme = "anti-drag.css",
title = "Insurance",
column(12, titlePanel("Estimating Cost to Carrier with Quantile Regression"), align = "center"),
# Sidebar panel for inputs ----
column(4, offset = 2,
br(), br(),
sliderInput(inputId = "children", label = "Number of Children", min = 0, max = 5, value = 2, width = "100%"),
sliderInput(inputId = "age", label = "Years of Age", min = 18, max = 50, value = 30, width = "100%"),
radioGroupButtons(
inputId = "smoker",
choiceNames = c("Non-Smoker", "Smoker"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
),
radioGroupButtons(
inputId = "male",
choiceNames = c("Male", "Female"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
)
),
column(4, offset = -1,
plotOutput(outputId = "plot", width = "100%")
)
)
server <- function(input, output) {
output$plot <- renderPlot({
rq_input <- data.frame(age = input$age,
children = input$children,
smoker = as.numeric(input$smoker),
male = as.numeric(input$male))
df <- rq_predict(rq_fit,rq_input)
gg_quantile_box(df)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(tidyverse)
library(RCurl)
library(scales)
library(quantreg)
library(shinyWidgets)
library(ggrepel)
library(shinycssloaders)
git_csv <- function(csv){
read.csv(text=getURL(paste("https://raw.githubusercontent.com/granthamtaylor/datasets/master/",csv,".csv", sep = "")))
}
insurance <- git_csv('insurance')
tau = c(0.15, 0.30, 0.50, 0.70, 0.85)
rq_fit <-rq(log(charges) ~ age + male + children + smoker + age:male + age:children + age:smoker + male:smoker + children:smoker, tau = tau, data = insurance)
rq_predict <- function(rq, record){
charges <- sort(as.vector(exp(predict(rq, record))))
df <- data.frame(charges, tau = tau, seq = 1:length(charges))
df$label <-  format_per(df, df$seq)
return(df)
}
format_per <- function(df, value){
return(paste0(df[value,'tau']*100,"th Percentile: $",format(round(df[value,'charges']),big.mark=",",scientific=FALSE)))
}
gg_quantile_box <- function(df){
ggplot(df, aes(x = 0, y = charges, label = label)) +
geom_errorbar(aes(ymin = df[1,'charges'],ymax = df[5,'charges'])) + theme_minimal() +
geom_crossbar(fatten = 2, fill = "#337AB7",aes(ymin = df[2,'charges'], y = df[3,'charges'],ymax = df[4,'charges'])) +
geom_text_repel(x = 0.6, hjust = 0, direction = "y") +
labs(x = NULL, y = "Distribution of Cost to Carrier") +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid = element_blank()) +
scale_x_continuous(limits = c(-.50, 1.3)) +
scale_y_continuous(limits = c((df[1,'charges'] * .99), (df[5,'charges'] * 1.01)))
}
ui <- fluidPage(
theme = "anti-drag.css",
title = "Insurance",
column(12, titlePanel("Estimating Cost to Carrier with Quantile Regression"), align = "center"),
# Sidebar panel for inputs ----
column(4, offset = 2,
br(), br(),
sliderInput(inputId = "children", label = "Number of Children", min = 0, max = 5, value = 2, width = "100%"),
sliderInput(inputId = "age", label = "Years of Age", min = 18, max = 50, value = 30, width = "100%"),
radioGroupButtons(
inputId = "smoker",
choiceNames = c("Non-Smoker", "Smoker"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
),
radioGroupButtons(
inputId = "male",
choiceNames = c("Male", "Female"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
)
),
column(4, offset = -1,
withSpinner(
plotOutput(outputId = "plot", width = "100%")
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
rq_input <- data.frame(age = input$age,
children = input$children,
smoker = as.numeric(input$smoker),
male = as.numeric(input$male))
df <- rq_predict(rq_fit,rq_input)
gg_quantile_box(df)
})
}
shinyApp(ui = ui, server = server)
?withSpinner
library(shiny)
library(shinythemes)
library(ggplot2)
library(tidyverse)
library(RCurl)
library(scales)
library(quantreg)
library(shinyWidgets)
library(ggrepel)
library(shinycssloaders)
git_csv <- function(csv){
read.csv(text=getURL(paste("https://raw.githubusercontent.com/granthamtaylor/datasets/master/",csv,".csv", sep = "")))
}
insurance <- git_csv('insurance')
tau = c(0.15, 0.30, 0.50, 0.70, 0.85)
rq_fit <-rq(log(charges) ~ age + male + children + smoker + age:male + age:children + age:smoker + male:smoker + children:smoker, tau = tau, data = insurance)
rq_predict <- function(rq, record){
charges <- sort(as.vector(exp(predict(rq, record))))
df <- data.frame(charges, tau = tau, seq = 1:length(charges))
df$label <-  format_per(df, df$seq)
return(df)
}
format_per <- function(df, value){
return(paste0(df[value,'tau']*100,"th Percentile: $",format(round(df[value,'charges']),big.mark=",",scientific=FALSE)))
}
gg_quantile_box <- function(df){
ggplot(df, aes(x = 0, y = charges, label = label)) +
geom_errorbar(aes(ymin = df[1,'charges'],ymax = df[5,'charges'])) + theme_minimal() +
geom_crossbar(fatten = 2, fill = "#337AB7",aes(ymin = df[2,'charges'], y = df[3,'charges'],ymax = df[4,'charges'])) +
geom_text_repel(x = 0.6, hjust = 0, direction = "y") +
labs(x = NULL, y = "Distribution of Cost to Carrier") +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid = element_blank()) +
scale_x_continuous(limits = c(-.50, 1.3)) +
scale_y_continuous(limits = c((df[1,'charges'] * .99), (df[5,'charges'] * 1.01)))
}
ui <- fluidPage(
theme = "anti-drag.css",
title = "Insurance",
column(12, titlePanel("Estimating Cost to Carrier with Quantile Regression"), align = "center"),
# Sidebar panel for inputs ----
column(4, offset = 2,
br(), br(),
sliderInput(inputId = "children", label = "Number of Children", min = 0, max = 5, value = 2, width = "100%"),
sliderInput(inputId = "age", label = "Years of Age", min = 18, max = 50, value = 30, width = "100%"),
radioGroupButtons(
inputId = "smoker",
choiceNames = c("Non-Smoker", "Smoker"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
),
radioGroupButtons(
inputId = "male",
choiceNames = c("Male", "Female"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
)
),
column(4, offset = -1,
withSpinner(
plotOutput(outputId = "plot", width = "100%"),
color = getOption("spinner.color", default = "#337AB7")
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
rq_input <- data.frame(age = input$age,
children = input$children,
smoker = as.numeric(input$smoker),
male = as.numeric(input$male))
df <- rq_predict(rq_fit,rq_input)
gg_quantile_box(df)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(tidyverse)
library(RCurl)
library(scales)
library(quantreg)
library(shinyWidgets)
library(ggrepel)
library(shinycssloaders)
git_csv <- function(csv){
read.csv(text=getURL(paste("https://raw.githubusercontent.com/granthamtaylor/datasets/master/",csv,".csv", sep = "")))
}
insurance <- git_csv('insurance')
tau = c(0.15, 0.30, 0.50, 0.70, 0.85)
rq_fit <-rq(log(charges) ~ age + male + children + smoker + age:male + age:children + age:smoker + male:smoker + children:smoker, tau = tau, data = insurance)
rq_predict <- function(rq, record){
charges <- sort(as.vector(exp(predict(rq, record))))
df <- data.frame(charges, tau = tau, seq = 1:length(charges))
df$label <-  format_per(df, df$seq)
return(df)
}
format_per <- function(df, value){
return(paste0(df[value,'tau']*100,"th Percentile: $",format(round(df[value,'charges']),big.mark=",",scientific=FALSE)))
}
gg_quantile_box <- function(df){
ggplot(df, aes(x = 0, y = charges, label = label)) +
geom_errorbar(aes(ymin = df[1,'charges'],ymax = df[5,'charges'])) + theme_minimal() +
geom_crossbar(fatten = 2, fill = "#337AB7",aes(ymin = df[2,'charges'], y = df[3,'charges'],ymax = df[4,'charges'])) +
geom_text_repel(x = 0.6, hjust = 0, direction = "y") +
labs(x = NULL, y = "Distribution of Cost to Carrier") +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid = element_blank()) +
scale_x_continuous(limits = c(-.50, 1.3)) +
scale_y_continuous(limits = c((df[1,'charges'] * .99), (df[5,'charges'] * 1.01)))
}
ui <- fluidPage(
theme = "anti-drag.css",
title = "Insurance",
column(12, titlePanel("Estimating Cost to Carrier with Quantile Regression"), align = "center"),
# Sidebar panel for inputs ----
column(4, offset = 2,
br(), br(),
sliderInput(inputId = "children", label = "Number of Children", min = 0, max = 5, value = 2, width = "100%"),
sliderInput(inputId = "age", label = "Years of Age", min = 18, max = 50, value = 30, width = "100%"),
radioGroupButtons(
inputId = "smoker",
choiceNames = c("Non-Smoker", "Smoker"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
),
radioGroupButtons(
inputId = "male",
choiceNames = c("Male", "Female"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
)
),
column(4, offset = -1,
withSpinner(
plotOutput(outputId = "plot", width = "100%"),
color = getOption("spinner.color", default = "#337AB7")
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
rq_input <- data.frame(age = input$age,
children = input$children,
smoker = as.numeric(input$smoker),
male = as.numeric(input$male))
df <- rq_predict(rq_fit,rq_input)
gg_quantile_box(df)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(tidyverse)
library(RCurl)
library(scales)
library(quantreg)
library(shinyWidgets)
library(ggrepel)
library(shinycssloaders)
git_csv <- function(csv){
read.csv(text=getURL(paste("https://raw.githubusercontent.com/granthamtaylor/datasets/master/",csv,".csv", sep = "")))
}
insurance <- git_csv('insurance')
tau = c(0.15, 0.30, 0.50, 0.70, 0.85)
rq_fit <-rq(log(charges) ~ age + male + children + smoker + age:male + age:children + age:smoker + male:smoker + children:smoker, tau = tau, data = insurance)
rq_predict <- function(rq, record){
charges <- sort(as.vector(exp(predict(rq, record))))
df <- data.frame(charges, tau = tau, seq = 1:length(charges))
df$label <-  format_per(df, df$seq)
return(df)
}
format_per <- function(df, value){
return(paste0(df[value,'tau']*100,"th Percentile: $",format(round(df[value,'charges']),big.mark=",",scientific=FALSE)))
}
gg_quantile_box <- function(df){
ggplot(df, aes(x = 0, y = charges, label = label)) +
geom_errorbar(aes(ymin = df[1,'charges'],ymax = df[5,'charges'])) + theme_minimal() +
geom_crossbar(fatten = 2, fill = "#337AB7",aes(ymin = df[2,'charges'], y = df[3,'charges'],ymax = df[4,'charges'])) +
geom_text_repel(x = 0.6, hjust = 0, direction = "y") +
labs(x = NULL, y = "Distribution of Cost to Carrier") +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid = element_blank()) +
scale_x_continuous(limits = c(-.50, 1.3)) +
scale_y_continuous(limits = c((df[1,'charges'] * .99), (df[5,'charges'] * 1.01)))
}
ui <- fluidPage(
theme = "anti-drag.css",
title = "Insurance",
column(12, titlePanel("Estimating Insurance Cost with Quantile Regression"), align = "center"),
# Sidebar panel for inputs ----
column(4, offset = 2,
br(), br(),
sliderInput(inputId = "children", label = "Number of Children", min = 0, max = 5, value = 2, width = "100%"),
sliderInput(inputId = "age", label = "Years of Age", min = 18, max = 50, value = 30, width = "100%"),
radioGroupButtons(
inputId = "smoker",
choiceNames = c("Non-Smoker", "Smoker"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
),
radioGroupButtons(
inputId = "male",
choiceNames = c("Male", "Female"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
)
),
column(4, offset = -1,
withSpinner(
plotOutput(outputId = "plot", width = "100%"),
color = getOption("spinner.color", default = "#337AB7")
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
rq_input <- data.frame(age = input$age,
children = input$children,
smoker = as.numeric(input$smoker),
male = as.numeric(input$male))
df <- rq_predict(rq_fit,rq_input)
gg_quantile_box(df)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(tidyverse)
library(RCurl)
library(scales)
library(quantreg)
library(shinyWidgets)
library(ggrepel)
library(shinycssloaders)
git_csv <- function(csv){
read.csv(text=getURL(paste("https://raw.githubusercontent.com/granthamtaylor/datasets/master/",csv,".csv", sep = "")))
}
insurance <- git_csv('insurance')
tau = c(0.15, 0.30, 0.50, 0.70, 0.85)
rq_fit <-rq(log(charges) ~ age + male + children + smoker + age:male + age:children + age:smoker + male:smoker + children:smoker, tau = tau, data = insurance)
rq_predict <- function(rq, record){
charges <- sort(as.vector(exp(predict(rq, record))))
df <- data.frame(charges, tau = tau, seq = 1:length(charges))
df$label <-  format_per(df, df$seq)
return(df)
}
format_per <- function(df, value){
return(paste0(df[value,'tau']*100,"th Percentile: $",format(round(df[value,'charges']),big.mark=",",scientific=FALSE)))
}
gg_quantile_box <- function(df){
ggplot(df, aes(x = 0, y = charges, label = label)) +
geom_errorbar(aes(ymin = df[1,'charges'],ymax = df[5,'charges'])) + theme_minimal() +
geom_crossbar(fatten = 2, fill = "#337AB7",aes(ymin = df[2,'charges'], y = df[3,'charges'],ymax = df[4,'charges'])) +
geom_text_repel(x = 0.6, hjust = 0, direction = "y") +
labs(x = NULL, y = "Distribution of Cost to Carrier") +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid = element_blank()) +
scale_x_continuous(limits = c(-.50, 1.3)) +
scale_y_continuous(limits = c((df[1,'charges'] * .99), (df[5,'charges'] * 1.01)))
}
ui <- fluidPage(
theme = "anti-drag.css",
title = "Insurance",
column(12, titlePanel("Estimating Health Insurance with Quantile Regression"), align = "center"),
# Sidebar panel for inputs ----
column(4, offset = 2,
br(), br(),
sliderInput(inputId = "children", label = "Number of Children", min = 0, max = 5, value = 2, width = "100%"),
sliderInput(inputId = "age", label = "Years of Age", min = 18, max = 50, value = 30, width = "100%"),
radioGroupButtons(
inputId = "smoker",
choiceNames = c("Non-Smoker", "Smoker"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
),
radioGroupButtons(
inputId = "male",
choiceNames = c("Male", "Female"),
justified = TRUE, status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
choiceValues = c(0, 1)
)
),
column(4, offset = -1,
withSpinner(
plotOutput(outputId = "plot", width = "100%"),
color = getOption("spinner.color", default = "#337AB7")
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
rq_input <- data.frame(age = input$age,
children = input$children,
smoker = as.numeric(input$smoker),
male = as.numeric(input$male))
df <- rq_predict(rq_fit,rq_input)
gg_quantile_box(df)
})
}
shinyApp(ui = ui, server = server)
